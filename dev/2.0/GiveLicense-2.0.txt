
#Give O365 Licenses
#August 14, 2015
#Michael Matthews 
#################
#This script is designed to give office 365 licenses to students and employees at BYU.  It logs in using the Connet-MsolService command
#It then sets forth the different types of licenses. Afterwards it uses the Import-CSV command to bring in the list of need-to-add users.
#Afterwards it determines whether or not they are a student or employee.  They are then given the appriopriate licenses.  
#This information is then logged under D:\Scripts\Licensesupdates\Logs\ChangeLogs
#################



function Get-ContainsLicense {
    param($licenses, $accountSku);

    $toReturn = $licenses | Where-Object { $_.AccountSkuId -eq "byu:OFFICESUBSCRIPTION_STUDENT" };
    
    return $toReturn -ne $null;
}

$curDate = $([datetime]::Now.ToString("yyyy-MM-dd"));

Import-Module MSOnline
$securePassword = ConvertTo-SecureString "Dana2471" -AsPlainText -Force
$credentials = New-Object System.Management.Automation.PSCredential("licensesupdateuser@byu.onmicrosoft.com", $securePassword)
Connect-MsolService -Credential $credentials >> "D:\Scripts\Licensesupdates\Logs\UsersToDelete\DELETEDUsers-$curDate.txt"

$studentadvantage = New-MsolLicenseOptions -AccountSkuId byu:OFFICESUBSCRIPTION_STUDENT 

$student = New-MsolLicenseOptions -AccountSkuId byu:STANDARDWOFFPACK_STUDENT -DisabledPlans EXCHANGE_S_STANDARD,MCOSTANDARD

$facultyadvantage = New-MsolLicenseOptions -AccountSkuId byu:OFFICESUBSCRIPTION_FACULTY 

$BI = New-MsolLicenseOptions -AccountSkuId byu:POWER_BI_STANDARD

$faculty = New-MsolLicenseOptions -AccountSkuId byu:STANDARDWOFFPACK_FACULTY -DisabledPlans EXCHANGE_S_STANDARD,MCOSTANDARD

$msolUsers = (Get-MsolUser -All);

Import-Csv -Path D:\Scripts\Licensesupdates\currentusers\add.csv |  ForEach-Object {
    $csvusers += $_.UserPrincipalName;
    $usersFound = Get-MsolUser -UserPrincipalName $_.UserPrincipalName;
    
    if ($usersFound -ne $null) {
        if(-not($usersFound.isLicensed)) {

            if ($_.Status -eq "Student"){
                Set-MsolUser -UserPrincipalName $_.UserPrincipalName -UsageLocation "US"
	            Set-MsolUserLicense -UserPrincipalName $_.UserPrincipalName -LicenseOptions @($student, $studentadvantage, $BI) -AddLicenses @("byu:STANDARDWOFFPACK_STUDENT", "byu:OFFICESUBSCRIPTION_STUDENT", "byu:POWER_BI_STANDARD");
               Write-Output "Added non existing user $($_.UserPrincipalName) to Student" >> "D:\Scripts\Licensesupdates\Logs\ChangeLogs\change-$curDate.txt";
            }
            elseif ($_.Status -eq "Employee"){
                Set-MsolUser -UserPrincipalName $_.UserPrincipalName -UsageLocation "US"
                Set-MsolUserLicense -UserPrincipalName $_.UserPrincipalName -LicenseOptions @($faculty, $facultyadvantage, $BI) -AddLicenses @("byu:STANDARDWOFFPACK_FACULTY", "byu:OFFICESUBSCRIPTION_FACULTY", "byu:POWER_BI_STANDARD");
                Write-Output "Added non existing user $($_.UserPrincipalName) to Faculty" >> "D:\Scripts\Licensesupdates\Logs\ChangeLogs\change-$curDate.txt";
            }

        }
     
       
        #This was included before when the script wasn't working off a "Delta" feed (See the Import-CSV part of this script).  
        #I believe that it will no longer be necessary to "cleanup" licenses this way.  If we run into a problem in the future
        #we can go ahead and add the uncommented lines below
        #cleanup for existing licenses

        #elseif ($_.Status -eq "Employee" -and $usersFound.Licenses.Count -lt 2) {
        #    Set-MsolUser -UserPrincipalName $_.UserPrincipalName -UsageLocation "US"
        #    Set-MsolUserLicense -UserPrincipalName $_.UserPrincipalName -LicenseOptions @($faculty, $facultyadvantage, $BI) -AddLicenses @("byu:STANDARDWOFFPACK_FACULTY", "byu:OFFICESUBSCRIPTION_FACULTY", "byu:POWER_BI_STANDARD");
        #}
        #elseif ($usersFound.Licenses -ne $null -and (-not(Get-ContainsLicense -accountSku "byu:OFFICESUBSCRIPTION_STUDENT" -licenses ($usersFound.Licenses))) -and ($_.Status -eq "Student")){
        #        Set-MsolUserLicense -UserPrincipalName $_.UserPrincipalName -LicenseOptions $studentadvantage -AddLicenses "byu:OFFICESUBSCRIPTION_STUDENT"
                #Write-Output "Added existing user $($_.UserPrincipalName) to Office Pro Subscription" >> "D:\Scripts\Licensesupdates\Logs\ChangeLogs\change-$curDate.txt";
        #}
 }
 } 