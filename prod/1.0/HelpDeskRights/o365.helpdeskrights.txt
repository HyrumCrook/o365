
#Authentication
Import-Module MSOnline
$securePassword = ConvertTo-SecureString "Dana2471" -AsPlainText -Force
$credentials = New-Object System.Management.Automation.PSCredential("licensesupdateuser@byu.onmicrosoft.com", $securePassword)
Connect-MsolService -Credential $credentials

#Getting date information to use on the file extensions
$todaysDate = Get-Date -Format yyyy-%M-%d
$date = (Get-Date).AddDays(-1)
$yesterdaysDate = date $date -format yyyy-%M-%d
            

#Path for the current list of users
$userPath = "D:\Scripts\Licensesupdates\serviceDeskRights\m.csceUsers_$todaysDate.txt"

#This will just format the txt file correctly, skipping the first 3 lines which consist of the header
Get-ADGroupMember m.csce | ft name > $userPath
Get-Content $userPath | Foreach {$_.TrimEnd()} | set-content "$userPath-1"
Get-Content "$userPath-1" | select -Skip 3 | set-content "$userPath-temp"
move "$userPath-temp" $userPath -Force

$array = Get-Content $userPath

$usersOld = Get-Content "D:\Scripts\Licensesupdates\serviceDeskRights\m.csceUsers_$yesterdaysDate.txt"
$usersNew = Get-Content "D:\Scripts\Licensesupdates\serviceDeskRights\m.csceUsers_$todaysDate.txt"

$comparisons = Compare-Object $($usersOld) $($usersNew)

Compare-Object $($usersOld) $($usersNew) >> "D:\Scripts\Licensesupdates\serviceDeskrights\output\output_$todaysDate.txt"


if($usersOld -ne $null){


foreach ($obj in $comparisons)
{
$name = $obj.InputObject + "@byu.edu"
    if($obj.SideIndicator -eq "=>"){

    Invoke-Command -ScriptBlock {
        Add-MsolRoleMember -RoleName "User Account Administrator" -RoleMembertype User -RoleMemberEmailAddress $name
        }
        write-host $name " Has been added"
    }
    elseif($obj.SideIndicator -eq "<="){

    Invoke-Command -ScriptBlock {
        Remove-MsolRoleMember -RoleName "User Account Administrator" -rolemembertype user -RoleMemberEmailAddress $name
    
        } 
        write-host $name "has been deleted"   
    }
}
}
else{
    foreach ($obj in $usersNew)
{
$name = $obj.InputObject + "@byu.edu"

    Invoke-Command -ScriptBlock {
        Add-MsolRoleMember -RoleName "User Account Administrator" -RoleMemberType User -RoleMemberEmailAddress $name
        }
write-host $name " Has been added"

}
}